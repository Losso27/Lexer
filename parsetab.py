
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BREAK COLON COMPARISON DEF ELSE EQUAL FLOAT FLOATCONST FOR IDENT IDENTF IF INT INTCONST LBRACE LBRACKET LPAREN MATH NEW NULL PRINT RBRACE RBRACKET READ RETURN RPAREN SEMICOLON SIGNAL STRING STRINGCONSTprogram : statement\n               | funclist\n               | epsilonfunclist : funcdef funclistauxfunclistaux : funclist\n                   | epsilonfuncdef : DEF IDENTF LPAREN paramlist RPAREN LBRACE statelist RBRACEparamlist : type IDENT paramlistaux\n                 | epsilonparamlistaux : COLON paramlist\n                    | epsilonstatelist : statement statelistauxstatelistaux : statelist\n                     | epsilonstatement : vardecl SEMICOLON\n                 | atribstat SEMICOLON\n                 | printstat SEMICOLON\n                 | readstat SEMICOLON\n                 | returnstat SEMICOLON\n                 | ifstat\n                 | forstat\n                 | LBRACE statelist RBRACE\n                 | BREAK SEMICOLON\n                 | SEMICOLONforstat : FOR LPAREN atribstat SEMICOLON expression SEMICOLON atribstat RPARENifstat : IF LPAREN expression RPAREN statement ifstatauxifstataux : ELSE statement \n                 | epsilonreturnstat : RETURNprintstat : PRINT expressionreadstat : READ expressionatribstat : lvalue EQUAL atribstat2atribstat2 : expression\n                  | allocexpression\n                  | funccallfunccall : IDENTF LPAREN paramlistcall RPARENparamlistcall : IDENT paramlistcallaux\n                     | epsilonparamlistcallaux : COLON paramlistcall\n                        | epsilonallocexpression : NEW type numexpressionvectorauxexpression : numexpression expressionauxexpressionaux : COMPARISON numexpression\n                     | epsilonnumexpressionvector : LBRACKET numexpression RBRACKET numexpressionvectorauxnumexpressionvectoraux : numexpressionvector\n                              | epsilonnumexpression : term numexpressionauxnumexpressionaux : numexpression2\n                        | epsilonnumexpression2 : SIGNAL term numexpressionauxterm : unaryexpr termauxtermaux : term2 \n               | epsilonterm2 : MATH unaryexpr termauxunaryexpr : SIGNAL factor\n                 | factorfactor : INTCONST\n              | STRINGCONST\n              | FLOATCONST\n              | NULL\n              | lvalue\n              | LPAREN numexpression RPARENlvalue : IDENT numexpressionvectorauxvardecl : type IDENT vardeclauxvardeclaux : vardecl2\n                  | epsilonvardecl2 : LBRACKET INTCONST RBRACKET vardeclauxtype : INT typeaux\n            | FLOAT typeaux \n            | STRING typeauxtypeaux : type2\n               | epsilontype2 : LBRACKET RBRACKET typeauxepsilon :'
    
_lr_action_items = {'LBRACE':([0,6,11,12,13,28,29,30,31,32,34,35,67,107,121,123,130,131,132,134,139,143,],[13,-24,-20,-21,13,-15,-16,-17,-18,-19,13,-23,-22,13,-75,134,-26,13,-28,13,-27,-25,]),'BREAK':([0,6,11,12,13,28,29,30,31,32,34,35,67,107,121,130,131,132,134,139,143,],[14,-24,-20,-21,14,-15,-16,-17,-18,-19,14,-23,-22,14,-75,-26,14,-28,14,-27,-25,]),'SEMICOLON':([0,5,6,7,8,9,10,11,12,13,14,17,21,25,26,27,28,29,30,31,32,34,35,39,40,41,42,45,46,47,48,50,51,52,53,54,55,57,61,62,63,65,66,67,71,72,73,76,77,78,79,82,84,85,86,87,89,90,91,93,96,98,100,101,103,104,105,106,107,112,113,114,115,119,120,121,122,125,126,130,131,132,134,139,143,],[6,28,-24,29,30,31,32,-20,-21,6,35,-75,-29,-75,-75,-75,-15,-16,-17,-18,-19,6,-23,-75,-64,-46,-47,-30,-75,-75,-75,-57,-58,-59,-60,-61,-62,-31,-69,-72,-73,-70,-71,-22,-65,-66,-67,-32,-33,-34,-35,-42,-44,-48,-49,-50,-52,-53,-54,-56,108,-75,-75,-75,-43,-75,-75,-63,6,-74,-75,-45,-41,-51,-55,-75,133,-68,-36,-26,6,-28,6,-27,-25,]),'$end':([0,1,2,3,4,6,11,12,15,28,29,30,31,32,35,36,37,38,67,121,130,132,139,143,144,],[-75,0,-1,-2,-3,-24,-20,-21,-75,-15,-16,-17,-18,-19,-23,-4,-5,-6,-22,-75,-26,-28,-27,-25,-7,]),'PRINT':([0,6,11,12,13,28,29,30,31,32,34,35,67,107,121,130,131,132,134,139,143,],[19,-24,-20,-21,19,-15,-16,-17,-18,-19,19,-23,-22,19,-75,-26,19,-28,19,-27,-25,]),'READ':([0,6,11,12,13,28,29,30,31,32,34,35,67,107,121,130,131,132,134,139,143,],[20,-24,-20,-21,20,-15,-16,-17,-18,-19,20,-23,-22,20,-75,-26,20,-28,20,-27,-25,]),'RETURN':([0,6,11,12,13,28,29,30,31,32,34,35,67,107,121,130,131,132,134,139,143,],[21,-24,-20,-21,21,-15,-16,-17,-18,-19,21,-23,-22,21,-75,-26,21,-28,21,-27,-25,]),'IF':([0,6,11,12,13,28,29,30,31,32,34,35,67,107,121,130,131,132,134,139,143,],[22,-24,-20,-21,22,-15,-16,-17,-18,-19,22,-23,-22,22,-75,-26,22,-28,22,-27,-25,]),'FOR':([0,6,11,12,13,28,29,30,31,32,34,35,67,107,121,130,131,132,134,139,143,],[23,-24,-20,-21,23,-15,-16,-17,-18,-19,23,-23,-22,23,-75,-26,23,-28,23,-27,-25,]),'DEF':([0,15,144,],[24,24,-7,]),'INT':([0,6,11,12,13,28,29,30,31,32,34,35,67,80,97,107,121,130,131,132,134,136,139,143,],[25,-24,-20,-21,25,-15,-16,-17,-18,-19,25,-23,-22,25,25,25,-75,-26,25,-28,25,25,-27,-25,]),'FLOAT':([0,6,11,12,13,28,29,30,31,32,34,35,67,80,97,107,121,130,131,132,134,136,139,143,],[26,-24,-20,-21,26,-15,-16,-17,-18,-19,26,-23,-22,26,26,26,-75,-26,26,-28,26,26,-27,-25,]),'STRING':([0,6,11,12,13,28,29,30,31,32,34,35,67,80,97,107,121,130,131,132,134,136,139,143,],[27,-24,-20,-21,27,-15,-16,-17,-18,-19,27,-23,-22,27,27,27,-75,-26,27,-28,27,27,-27,-25,]),'IDENT':([0,6,11,12,13,16,19,20,25,26,27,28,29,30,31,32,34,35,43,44,49,56,58,59,61,62,63,65,66,67,83,88,92,98,102,107,108,110,112,121,128,130,131,132,133,134,139,143,],[17,-24,-20,-21,17,39,17,17,-75,-75,-75,-15,-16,-17,-18,-19,17,-23,17,17,17,17,17,17,-69,-72,-73,-70,-71,-22,17,17,17,-75,117,17,17,124,-74,-75,117,-26,17,-28,17,17,-27,-25,]),'RBRACE':([6,11,12,28,29,30,31,32,33,34,35,67,68,69,70,121,130,132,139,141,143,],[-24,-20,-21,-15,-16,-17,-18,-19,67,-75,-23,-22,-12,-13,-14,-75,-26,-28,-27,144,-25,]),'ELSE':([6,11,12,28,29,30,31,32,35,67,121,130,132,139,143,],[-24,-20,-21,-15,-16,-17,-18,-19,-23,-22,131,-26,-28,-27,-25,]),'LBRACKET':([17,25,26,27,39,61,62,63,65,66,98,100,101,112,113,],[43,64,64,64,74,-69,-72,-73,-70,-71,64,43,43,-74,74,]),'EQUAL':([17,18,40,41,42,100,114,],[-75,44,-64,-46,-47,-75,-45,]),'MATH':([17,40,41,42,48,50,51,52,53,54,55,93,100,105,106,114,],[-75,-64,-46,-47,92,-57,-58,-59,-60,-61,-62,-56,-75,92,-63,-45,]),'SIGNAL':([17,19,20,40,41,42,43,44,47,48,50,51,52,53,54,55,56,58,83,88,89,90,91,92,93,100,104,105,106,108,114,120,],[-75,49,49,-64,-46,-47,49,49,88,-75,-57,-58,-59,-60,-61,-62,49,49,49,49,-52,-53,-54,49,-56,-75,88,-75,-63,49,-45,-55,]),'COMPARISON':([17,40,41,42,46,47,48,50,51,52,53,54,55,85,86,87,89,90,91,93,100,104,105,106,114,119,120,],[-75,-64,-46,-47,83,-75,-75,-57,-58,-59,-60,-61,-62,-48,-49,-50,-52,-53,-54,-56,-75,-75,-75,-63,-45,-51,-55,]),'RBRACKET':([17,40,41,42,47,48,50,51,52,53,54,55,64,75,85,86,87,89,90,91,93,99,100,104,105,106,114,119,120,],[-75,-64,-46,-47,-75,-75,-57,-58,-59,-60,-61,-62,98,100,-48,-49,-50,-52,-53,-54,-56,113,-75,-75,-75,-63,-45,-51,-55,]),'RPAREN':([17,25,26,27,40,41,42,46,47,48,50,51,52,53,54,55,61,62,63,65,66,76,77,78,79,82,84,85,86,87,89,90,91,93,94,95,97,98,100,101,102,103,104,105,106,109,111,112,114,115,116,117,118,119,120,124,126,127,128,129,135,136,137,138,140,142,],[-75,-75,-75,-75,-64,-46,-47,-75,-75,-75,-57,-58,-59,-60,-61,-62,-69,-72,-73,-70,-71,-32,-33,-34,-35,-42,-44,-48,-49,-50,-52,-53,-54,-56,106,107,-75,-75,-75,-75,-75,-43,-75,-75,-63,123,-9,-74,-45,-41,126,-75,-38,-51,-55,-75,-36,-37,-75,-40,-8,-75,-11,-39,143,-10,]),'INTCONST':([19,20,43,44,49,56,58,74,83,88,92,108,],[51,51,51,51,51,51,51,99,51,51,51,51,]),'STRINGCONST':([19,20,43,44,49,56,58,83,88,92,108,],[52,52,52,52,52,52,52,52,52,52,52,]),'FLOATCONST':([19,20,43,44,49,56,58,83,88,92,108,],[53,53,53,53,53,53,53,53,53,53,53,]),'NULL':([19,20,43,44,49,56,58,83,88,92,108,],[54,54,54,54,54,54,54,54,54,54,54,]),'LPAREN':([19,20,22,23,43,44,49,56,58,60,81,83,88,92,108,],[56,56,58,59,56,56,56,56,56,97,102,56,56,56,56,]),'IDENTF':([24,44,],[60,81,]),'NEW':([44,],[80,]),'COLON':([117,124,],[128,136,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,13,34,107,131,134,],[2,34,34,121,139,34,]),'funclist':([0,15,],[3,37,]),'epsilon':([0,15,17,25,26,27,34,39,46,47,48,97,98,100,101,102,104,105,113,117,121,124,128,136,],[4,38,42,63,63,63,70,73,84,87,91,111,63,42,42,118,87,91,73,129,132,137,118,111,]),'vardecl':([0,13,34,107,131,134,],[5,5,5,5,5,5,]),'atribstat':([0,13,34,59,107,131,133,134,],[7,7,7,96,7,7,140,7,]),'printstat':([0,13,34,107,131,134,],[8,8,8,8,8,8,]),'readstat':([0,13,34,107,131,134,],[9,9,9,9,9,9,]),'returnstat':([0,13,34,107,131,134,],[10,10,10,10,10,10,]),'ifstat':([0,13,34,107,131,134,],[11,11,11,11,11,11,]),'forstat':([0,13,34,107,131,134,],[12,12,12,12,12,12,]),'funcdef':([0,15,],[15,15,]),'type':([0,13,34,80,97,107,131,134,136,],[16,16,16,101,110,16,16,16,110,]),'lvalue':([0,13,19,20,34,43,44,49,56,58,59,83,88,92,107,108,131,133,134,],[18,18,55,55,18,55,55,55,55,55,18,55,55,55,18,55,18,18,18,]),'statelist':([13,34,134,],[33,69,141,]),'funclistaux':([15,],[36,]),'numexpressionvectoraux':([17,100,101,],[40,114,115,]),'numexpressionvector':([17,100,101,],[41,41,41,]),'expression':([19,20,44,58,108,],[45,57,77,95,122,]),'numexpression':([19,20,43,44,56,58,83,108,],[46,46,75,46,94,46,103,46,]),'term':([19,20,43,44,56,58,83,88,108,],[47,47,47,47,47,47,47,104,47,]),'unaryexpr':([19,20,43,44,56,58,83,88,92,108,],[48,48,48,48,48,48,48,48,105,48,]),'factor':([19,20,43,44,49,56,58,83,88,92,108,],[50,50,50,50,93,50,50,50,50,50,50,]),'typeaux':([25,26,27,98,],[61,65,66,112,]),'type2':([25,26,27,98,],[62,62,62,62,]),'statelistaux':([34,],[68,]),'vardeclaux':([39,113,],[71,125,]),'vardecl2':([39,113,],[72,72,]),'atribstat2':([44,],[76,]),'allocexpression':([44,],[78,]),'funccall':([44,],[79,]),'expressionaux':([46,],[82,]),'numexpressionaux':([47,104,],[85,119,]),'numexpression2':([47,104,],[86,86,]),'termaux':([48,105,],[89,120,]),'term2':([48,105,],[90,90,]),'paramlist':([97,136,],[109,142,]),'paramlistcall':([102,128,],[116,138,]),'paramlistcallaux':([117,],[127,]),'ifstataux':([121,],[130,]),'paramlistaux':([124,],[135,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','parser.py',111),
  ('program -> funclist','program',1,'p_program','parser.py',112),
  ('program -> epsilon','program',1,'p_program','parser.py',113),
  ('funclist -> funcdef funclistaux','funclist',2,'p_funclist','parser.py',116),
  ('funclistaux -> funclist','funclistaux',1,'p_funclistaux','parser.py',119),
  ('funclistaux -> epsilon','funclistaux',1,'p_funclistaux','parser.py',120),
  ('funcdef -> DEF IDENTF LPAREN paramlist RPAREN LBRACE statelist RBRACE','funcdef',8,'p_funcdef','parser.py',123),
  ('paramlist -> type IDENT paramlistaux','paramlist',3,'p_paramlist','parser.py',126),
  ('paramlist -> epsilon','paramlist',1,'p_paramlist','parser.py',127),
  ('paramlistaux -> COLON paramlist','paramlistaux',2,'p_paramlistaux','parser.py',130),
  ('paramlistaux -> epsilon','paramlistaux',1,'p_paramlistaux','parser.py',131),
  ('statelist -> statement statelistaux','statelist',2,'p_statelist','parser.py',134),
  ('statelistaux -> statelist','statelistaux',1,'p_statelistaux','parser.py',137),
  ('statelistaux -> epsilon','statelistaux',1,'p_statelistaux','parser.py',138),
  ('statement -> vardecl SEMICOLON','statement',2,'p_statement','parser.py',141),
  ('statement -> atribstat SEMICOLON','statement',2,'p_statement','parser.py',142),
  ('statement -> printstat SEMICOLON','statement',2,'p_statement','parser.py',143),
  ('statement -> readstat SEMICOLON','statement',2,'p_statement','parser.py',144),
  ('statement -> returnstat SEMICOLON','statement',2,'p_statement','parser.py',145),
  ('statement -> ifstat','statement',1,'p_statement','parser.py',146),
  ('statement -> forstat','statement',1,'p_statement','parser.py',147),
  ('statement -> LBRACE statelist RBRACE','statement',3,'p_statement','parser.py',148),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement','parser.py',149),
  ('statement -> SEMICOLON','statement',1,'p_statement','parser.py',150),
  ('forstat -> FOR LPAREN atribstat SEMICOLON expression SEMICOLON atribstat RPAREN','forstat',8,'p_forstat','parser.py',153),
  ('ifstat -> IF LPAREN expression RPAREN statement ifstataux','ifstat',6,'p_ifstat','parser.py',156),
  ('ifstataux -> ELSE statement','ifstataux',2,'p_ifstataux','parser.py',159),
  ('ifstataux -> epsilon','ifstataux',1,'p_ifstataux','parser.py',160),
  ('returnstat -> RETURN','returnstat',1,'p_returnstat','parser.py',163),
  ('printstat -> PRINT expression','printstat',2,'p_printstat','parser.py',166),
  ('readstat -> READ expression','readstat',2,'p_readstat','parser.py',169),
  ('atribstat -> lvalue EQUAL atribstat2','atribstat',3,'p_atribstat','parser.py',172),
  ('atribstat2 -> expression','atribstat2',1,'p_atribstat2','parser.py',175),
  ('atribstat2 -> allocexpression','atribstat2',1,'p_atribstat2','parser.py',176),
  ('atribstat2 -> funccall','atribstat2',1,'p_atribstat2','parser.py',177),
  ('funccall -> IDENTF LPAREN paramlistcall RPAREN','funccall',4,'p_funccall','parser.py',180),
  ('paramlistcall -> IDENT paramlistcallaux','paramlistcall',2,'p_paramlistcall','parser.py',183),
  ('paramlistcall -> epsilon','paramlistcall',1,'p_paramlistcall','parser.py',184),
  ('paramlistcallaux -> COLON paramlistcall','paramlistcallaux',2,'p_paramlistcallaux','parser.py',187),
  ('paramlistcallaux -> epsilon','paramlistcallaux',1,'p_paramlistcallaux','parser.py',188),
  ('allocexpression -> NEW type numexpressionvectoraux','allocexpression',3,'p_allocexpression','parser.py',191),
  ('expression -> numexpression expressionaux','expression',2,'p_expression','parser.py',194),
  ('expressionaux -> COMPARISON numexpression','expressionaux',2,'p_expressionaux','parser.py',197),
  ('expressionaux -> epsilon','expressionaux',1,'p_expressionaux','parser.py',198),
  ('numexpressionvector -> LBRACKET numexpression RBRACKET numexpressionvectoraux','numexpressionvector',4,'p_numexpressionvector','parser.py',201),
  ('numexpressionvectoraux -> numexpressionvector','numexpressionvectoraux',1,'p_numexpressionvectoraux','parser.py',204),
  ('numexpressionvectoraux -> epsilon','numexpressionvectoraux',1,'p_numexpressionvectoraux','parser.py',205),
  ('numexpression -> term numexpressionaux','numexpression',2,'p_numexpression','parser.py',208),
  ('numexpressionaux -> numexpression2','numexpressionaux',1,'p_numexpressionaux','parser.py',211),
  ('numexpressionaux -> epsilon','numexpressionaux',1,'p_numexpressionaux','parser.py',212),
  ('numexpression2 -> SIGNAL term numexpressionaux','numexpression2',3,'p_numexpression2','parser.py',215),
  ('term -> unaryexpr termaux','term',2,'p_term','parser.py',218),
  ('termaux -> term2','termaux',1,'p_termaux','parser.py',221),
  ('termaux -> epsilon','termaux',1,'p_termaux','parser.py',222),
  ('term2 -> MATH unaryexpr termaux','term2',3,'p_term2','parser.py',225),
  ('unaryexpr -> SIGNAL factor','unaryexpr',2,'p_unaryexpr','parser.py',228),
  ('unaryexpr -> factor','unaryexpr',1,'p_unaryexpr','parser.py',229),
  ('factor -> INTCONST','factor',1,'p_factor','parser.py',232),
  ('factor -> STRINGCONST','factor',1,'p_factor','parser.py',233),
  ('factor -> FLOATCONST','factor',1,'p_factor','parser.py',234),
  ('factor -> NULL','factor',1,'p_factor','parser.py',235),
  ('factor -> lvalue','factor',1,'p_factor','parser.py',236),
  ('factor -> LPAREN numexpression RPAREN','factor',3,'p_factor','parser.py',237),
  ('lvalue -> IDENT numexpressionvectoraux','lvalue',2,'p_lvalue','parser.py',240),
  ('vardecl -> type IDENT vardeclaux','vardecl',3,'p_vardecl','parser.py',243),
  ('vardeclaux -> vardecl2','vardeclaux',1,'p_vardeclaux','parser.py',246),
  ('vardeclaux -> epsilon','vardeclaux',1,'p_vardeclaux','parser.py',247),
  ('vardecl2 -> LBRACKET INTCONST RBRACKET vardeclaux','vardecl2',4,'p_vardecl2','parser.py',250),
  ('type -> INT typeaux','type',2,'p_type','parser.py',253),
  ('type -> FLOAT typeaux','type',2,'p_type','parser.py',254),
  ('type -> STRING typeaux','type',2,'p_type','parser.py',255),
  ('typeaux -> type2','typeaux',1,'p_typeaux','parser.py',258),
  ('typeaux -> epsilon','typeaux',1,'p_typeaux','parser.py',259),
  ('type2 -> LBRACKET RBRACKET typeaux','type2',3,'p_type2','parser.py',262),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','parser.py',265),
]
