
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BREAK COLON COMPARISON DEF ELSE EQUAL FLOAT FLOATCONST FOR IDENT IDENTF IF INT INTCONST LBRACE LBRACKET LPAREN MATH NEW NULL PRINT RBRACE RBRACKET READ RETURN RPAREN SEMICOLON SIGNAL STRING STRINGCONSTprogram : statement\n               | funclist\n               | epsilonfunclist : funcdef funclistauxfunclistaux : funclist\n                   | epsilonfuncdef : DEF IDENTF LPAREN paramlist RPAREN LBRACE statelist RBRACEparamlist : type IDENT paramlistaux\n                 | epsilonparamlistaux : COLON paramlist\n                    | epsilonstatelist : statement statelistauxstatelistaux : statelist\n                     | epsilonstatement : vardecl SEMICOLON\n                 | atribstat SEMICOLON\n                 | printstat SEMICOLON\n                 | readstat SEMICOLON\n                 | returnstat SEMICOLON\n                 | ifstat\n                 | forstat\n                 | LBRACE statelist RBRACE\n                 | BREAK SEMICOLON\n                 | SEMICOLONforstat : FOR LPAREN atribstat SEMICOLON expression SEMICOLON atribstat RPARENifstat : IF LPAREN expression RPAREN statement ifstatauxifstataux : ELSE statement \n                 | epsilonreturnstat : RETURNprintstat : PRINT expressionreadstat : READ expressionatribstat : lvalue EQUAL atribstat2atribstat2 : expression\n                  | allocexpression\n                  | funccallfunccall : IDENTF LPAREN paramlistcall RPARENparamlistcall : IDENT paramlistcallaux\n                     | epsilonparamlistcallaux : COLON paramlistcall\n                        | epsilonallocexpression : NEW type numexpressionvectorauxexpression : numexpression expressionauxexpressionaux : COMPARISON numexpression\n                     | epsilonnumexpressionvector : LBRACKET numexpression RBRACKET numexpressionvectorauxnumexpressionvectoraux : numexpressionvector\n                              | epsilonnumexpression : term numexpressionauxnumexpressionaux : numexpression2\n                        | epsilonnumexpression2 : SIGNAL term numexpressionauxterm : unaryexpr termauxtermaux : term2 \n               | epsilonterm2 : MATH unaryexpr termauxunaryexpr : SIGNAL factor\n                 | factorfactor : INTCONST\n              | STRINGCONST\n              | FLOATCONST\n              | NULL\n              | lvalue\n              | LPAREN numexpression RPARENlvalue : IDENT numexpressionvectorauxvardecl : type IDENT vardeclauxvardeclaux : vardecl2\n                  | epsilonvardecl2 : LBRACKET INTCONST RBRACKET vardeclauxtype : INT\n            | FLOAT \n            | STRING epsilon :'
    
_lr_action_items = {'LBRACE':([0,6,11,12,13,28,29,30,31,32,34,35,61,100,113,115,122,123,124,126,131,135,],[13,-24,-20,-21,13,-15,-16,-17,-18,-19,13,-23,-22,13,-72,126,-26,13,-28,13,-27,-25,]),'BREAK':([0,6,11,12,13,28,29,30,31,32,34,35,61,100,113,122,123,124,126,131,135,],[14,-24,-20,-21,14,-15,-16,-17,-18,-19,14,-23,-22,14,-72,-26,14,-28,14,-27,-25,]),'SEMICOLON':([0,5,6,7,8,9,10,11,12,13,14,17,21,25,26,27,28,29,30,31,32,34,35,39,40,41,42,45,46,47,48,50,51,52,53,54,55,57,61,65,66,67,70,71,72,73,76,78,79,80,81,83,84,85,87,90,93,94,96,97,98,99,100,105,106,107,111,112,113,114,117,118,122,123,124,126,131,135,],[6,28,-24,29,30,31,32,-20,-21,6,35,-72,-29,-69,-70,-71,-15,-16,-17,-18,-19,6,-23,-72,-64,-46,-47,-30,-72,-72,-72,-57,-58,-59,-60,-61,-62,-31,-22,-65,-66,-67,-32,-33,-34,-35,-42,-44,-48,-49,-50,-52,-53,-54,-56,101,-72,-72,-43,-72,-72,-63,6,-72,-45,-41,-51,-55,-72,125,-68,-36,-26,6,-28,6,-27,-25,]),'$end':([0,1,2,3,4,6,11,12,15,28,29,30,31,32,35,36,37,38,61,113,122,124,131,135,136,],[-72,0,-1,-2,-3,-24,-20,-21,-72,-15,-16,-17,-18,-19,-23,-4,-5,-6,-22,-72,-26,-28,-27,-25,-7,]),'PRINT':([0,6,11,12,13,28,29,30,31,32,34,35,61,100,113,122,123,124,126,131,135,],[19,-24,-20,-21,19,-15,-16,-17,-18,-19,19,-23,-22,19,-72,-26,19,-28,19,-27,-25,]),'READ':([0,6,11,12,13,28,29,30,31,32,34,35,61,100,113,122,123,124,126,131,135,],[20,-24,-20,-21,20,-15,-16,-17,-18,-19,20,-23,-22,20,-72,-26,20,-28,20,-27,-25,]),'RETURN':([0,6,11,12,13,28,29,30,31,32,34,35,61,100,113,122,123,124,126,131,135,],[21,-24,-20,-21,21,-15,-16,-17,-18,-19,21,-23,-22,21,-72,-26,21,-28,21,-27,-25,]),'IF':([0,6,11,12,13,28,29,30,31,32,34,35,61,100,113,122,123,124,126,131,135,],[22,-24,-20,-21,22,-15,-16,-17,-18,-19,22,-23,-22,22,-72,-26,22,-28,22,-27,-25,]),'FOR':([0,6,11,12,13,28,29,30,31,32,34,35,61,100,113,122,123,124,126,131,135,],[23,-24,-20,-21,23,-15,-16,-17,-18,-19,23,-23,-22,23,-72,-26,23,-28,23,-27,-25,]),'DEF':([0,15,136,],[24,24,-7,]),'INT':([0,6,11,12,13,28,29,30,31,32,34,35,61,74,91,100,113,122,123,124,126,128,131,135,],[25,-24,-20,-21,25,-15,-16,-17,-18,-19,25,-23,-22,25,25,25,-72,-26,25,-28,25,25,-27,-25,]),'FLOAT':([0,6,11,12,13,28,29,30,31,32,34,35,61,74,91,100,113,122,123,124,126,128,131,135,],[26,-24,-20,-21,26,-15,-16,-17,-18,-19,26,-23,-22,26,26,26,-72,-26,26,-28,26,26,-27,-25,]),'STRING':([0,6,11,12,13,28,29,30,31,32,34,35,61,74,91,100,113,122,123,124,126,128,131,135,],[27,-24,-20,-21,27,-15,-16,-17,-18,-19,27,-23,-22,27,27,27,-72,-26,27,-28,27,27,-27,-25,]),'IDENT':([0,6,11,12,13,16,19,20,25,26,27,28,29,30,31,32,34,35,43,44,49,56,58,59,61,77,82,86,95,100,101,103,113,120,122,123,124,125,126,131,135,],[17,-24,-20,-21,17,39,17,17,-69,-70,-71,-15,-16,-17,-18,-19,17,-23,17,17,17,17,17,17,-22,17,17,17,109,17,17,116,-72,109,-26,17,-28,17,17,-27,-25,]),'RBRACE':([6,11,12,28,29,30,31,32,33,34,35,61,62,63,64,113,122,124,131,133,135,],[-24,-20,-21,-15,-16,-17,-18,-19,61,-72,-23,-22,-12,-13,-14,-72,-26,-28,-27,136,-25,]),'ELSE':([6,11,12,28,29,30,31,32,35,61,113,122,124,131,135,],[-24,-20,-21,-15,-16,-17,-18,-19,-23,-22,123,-26,-28,-27,-25,]),'LBRACKET':([17,25,26,27,39,93,94,105,],[43,-69,-70,-71,68,43,43,68,]),'EQUAL':([17,18,40,41,42,93,106,],[-72,44,-64,-46,-47,-72,-45,]),'MATH':([17,40,41,42,48,50,51,52,53,54,55,87,93,98,99,106,],[-72,-64,-46,-47,86,-57,-58,-59,-60,-61,-62,-56,-72,86,-63,-45,]),'SIGNAL':([17,19,20,40,41,42,43,44,47,48,50,51,52,53,54,55,56,58,77,82,83,84,85,86,87,93,97,98,99,101,106,112,],[-72,49,49,-64,-46,-47,49,49,82,-72,-57,-58,-59,-60,-61,-62,49,49,49,49,-52,-53,-54,49,-56,-72,82,-72,-63,49,-45,-55,]),'COMPARISON':([17,40,41,42,46,47,48,50,51,52,53,54,55,79,80,81,83,84,85,87,93,97,98,99,106,111,112,],[-72,-64,-46,-47,77,-72,-72,-57,-58,-59,-60,-61,-62,-48,-49,-50,-52,-53,-54,-56,-72,-72,-72,-63,-45,-51,-55,]),'RBRACKET':([17,40,41,42,47,48,50,51,52,53,54,55,69,79,80,81,83,84,85,87,92,93,97,98,99,106,111,112,],[-72,-64,-46,-47,-72,-72,-57,-58,-59,-60,-61,-62,93,-48,-49,-50,-52,-53,-54,-56,105,-72,-72,-72,-63,-45,-51,-55,]),'RPAREN':([17,25,26,27,40,41,42,46,47,48,50,51,52,53,54,55,70,71,72,73,76,78,79,80,81,83,84,85,87,88,89,91,93,94,95,96,97,98,99,102,104,106,107,108,109,110,111,112,116,118,119,120,121,127,128,129,130,132,134,],[-72,-69,-70,-71,-64,-46,-47,-72,-72,-72,-57,-58,-59,-60,-61,-62,-32,-33,-34,-35,-42,-44,-48,-49,-50,-52,-53,-54,-56,99,100,-72,-72,-72,-72,-43,-72,-72,-63,115,-9,-45,-41,118,-72,-38,-51,-55,-72,-36,-37,-72,-40,-8,-72,-11,-39,135,-10,]),'INTCONST':([19,20,43,44,49,56,58,68,77,82,86,101,],[51,51,51,51,51,51,51,92,51,51,51,51,]),'STRINGCONST':([19,20,43,44,49,56,58,77,82,86,101,],[52,52,52,52,52,52,52,52,52,52,52,]),'FLOATCONST':([19,20,43,44,49,56,58,77,82,86,101,],[53,53,53,53,53,53,53,53,53,53,53,]),'NULL':([19,20,43,44,49,56,58,77,82,86,101,],[54,54,54,54,54,54,54,54,54,54,54,]),'LPAREN':([19,20,22,23,43,44,49,56,58,60,75,77,82,86,101,],[56,56,58,59,56,56,56,56,56,91,95,56,56,56,56,]),'IDENTF':([24,44,],[60,75,]),'NEW':([44,],[74,]),'COLON':([109,116,],[120,128,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,13,34,100,123,126,],[2,34,34,113,131,34,]),'funclist':([0,15,],[3,37,]),'epsilon':([0,15,17,34,39,46,47,48,91,93,94,95,97,98,105,109,113,116,120,128,],[4,38,42,64,67,78,81,85,104,42,42,110,81,85,67,121,124,129,110,104,]),'vardecl':([0,13,34,100,123,126,],[5,5,5,5,5,5,]),'atribstat':([0,13,34,59,100,123,125,126,],[7,7,7,90,7,7,132,7,]),'printstat':([0,13,34,100,123,126,],[8,8,8,8,8,8,]),'readstat':([0,13,34,100,123,126,],[9,9,9,9,9,9,]),'returnstat':([0,13,34,100,123,126,],[10,10,10,10,10,10,]),'ifstat':([0,13,34,100,123,126,],[11,11,11,11,11,11,]),'forstat':([0,13,34,100,123,126,],[12,12,12,12,12,12,]),'funcdef':([0,15,],[15,15,]),'type':([0,13,34,74,91,100,123,126,128,],[16,16,16,94,103,16,16,16,103,]),'lvalue':([0,13,19,20,34,43,44,49,56,58,59,77,82,86,100,101,123,125,126,],[18,18,55,55,18,55,55,55,55,55,18,55,55,55,18,55,18,18,18,]),'statelist':([13,34,126,],[33,63,133,]),'funclistaux':([15,],[36,]),'numexpressionvectoraux':([17,93,94,],[40,106,107,]),'numexpressionvector':([17,93,94,],[41,41,41,]),'expression':([19,20,44,58,101,],[45,57,71,89,114,]),'numexpression':([19,20,43,44,56,58,77,101,],[46,46,69,46,88,46,96,46,]),'term':([19,20,43,44,56,58,77,82,101,],[47,47,47,47,47,47,47,97,47,]),'unaryexpr':([19,20,43,44,56,58,77,82,86,101,],[48,48,48,48,48,48,48,48,98,48,]),'factor':([19,20,43,44,49,56,58,77,82,86,101,],[50,50,50,50,87,50,50,50,50,50,50,]),'statelistaux':([34,],[62,]),'vardeclaux':([39,105,],[65,117,]),'vardecl2':([39,105,],[66,66,]),'atribstat2':([44,],[70,]),'allocexpression':([44,],[72,]),'funccall':([44,],[73,]),'expressionaux':([46,],[76,]),'numexpressionaux':([47,97,],[79,111,]),'numexpression2':([47,97,],[80,80,]),'termaux':([48,98,],[83,112,]),'term2':([48,98,],[84,84,]),'paramlist':([91,128,],[102,134,]),'paramlistcall':([95,120,],[108,130,]),'paramlistcallaux':([109,],[119,]),'ifstataux':([113,],[122,]),'paramlistaux':([116,],[127,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','parser.py',111),
  ('program -> funclist','program',1,'p_program','parser.py',112),
  ('program -> epsilon','program',1,'p_program','parser.py',113),
  ('funclist -> funcdef funclistaux','funclist',2,'p_funclist','parser.py',116),
  ('funclistaux -> funclist','funclistaux',1,'p_funclistaux','parser.py',119),
  ('funclistaux -> epsilon','funclistaux',1,'p_funclistaux','parser.py',120),
  ('funcdef -> DEF IDENTF LPAREN paramlist RPAREN LBRACE statelist RBRACE','funcdef',8,'p_funcdef','parser.py',123),
  ('paramlist -> type IDENT paramlistaux','paramlist',3,'p_paramlist','parser.py',126),
  ('paramlist -> epsilon','paramlist',1,'p_paramlist','parser.py',127),
  ('paramlistaux -> COLON paramlist','paramlistaux',2,'p_paramlistaux','parser.py',130),
  ('paramlistaux -> epsilon','paramlistaux',1,'p_paramlistaux','parser.py',131),
  ('statelist -> statement statelistaux','statelist',2,'p_statelist','parser.py',134),
  ('statelistaux -> statelist','statelistaux',1,'p_statelistaux','parser.py',137),
  ('statelistaux -> epsilon','statelistaux',1,'p_statelistaux','parser.py',138),
  ('statement -> vardecl SEMICOLON','statement',2,'p_statement','parser.py',141),
  ('statement -> atribstat SEMICOLON','statement',2,'p_statement','parser.py',142),
  ('statement -> printstat SEMICOLON','statement',2,'p_statement','parser.py',143),
  ('statement -> readstat SEMICOLON','statement',2,'p_statement','parser.py',144),
  ('statement -> returnstat SEMICOLON','statement',2,'p_statement','parser.py',145),
  ('statement -> ifstat','statement',1,'p_statement','parser.py',146),
  ('statement -> forstat','statement',1,'p_statement','parser.py',147),
  ('statement -> LBRACE statelist RBRACE','statement',3,'p_statement','parser.py',148),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement','parser.py',149),
  ('statement -> SEMICOLON','statement',1,'p_statement','parser.py',150),
  ('forstat -> FOR LPAREN atribstat SEMICOLON expression SEMICOLON atribstat RPAREN','forstat',8,'p_forstat','parser.py',153),
  ('ifstat -> IF LPAREN expression RPAREN statement ifstataux','ifstat',6,'p_ifstat','parser.py',156),
  ('ifstataux -> ELSE statement','ifstataux',2,'p_ifstataux','parser.py',159),
  ('ifstataux -> epsilon','ifstataux',1,'p_ifstataux','parser.py',160),
  ('returnstat -> RETURN','returnstat',1,'p_returnstat','parser.py',163),
  ('printstat -> PRINT expression','printstat',2,'p_printstat','parser.py',166),
  ('readstat -> READ expression','readstat',2,'p_readstat','parser.py',169),
  ('atribstat -> lvalue EQUAL atribstat2','atribstat',3,'p_atribstat','parser.py',172),
  ('atribstat2 -> expression','atribstat2',1,'p_atribstat2','parser.py',175),
  ('atribstat2 -> allocexpression','atribstat2',1,'p_atribstat2','parser.py',176),
  ('atribstat2 -> funccall','atribstat2',1,'p_atribstat2','parser.py',177),
  ('funccall -> IDENTF LPAREN paramlistcall RPAREN','funccall',4,'p_funccall','parser.py',180),
  ('paramlistcall -> IDENT paramlistcallaux','paramlistcall',2,'p_paramlistcall','parser.py',183),
  ('paramlistcall -> epsilon','paramlistcall',1,'p_paramlistcall','parser.py',184),
  ('paramlistcallaux -> COLON paramlistcall','paramlistcallaux',2,'p_paramlistcallaux','parser.py',187),
  ('paramlistcallaux -> epsilon','paramlistcallaux',1,'p_paramlistcallaux','parser.py',188),
  ('allocexpression -> NEW type numexpressionvectoraux','allocexpression',3,'p_allocexpression','parser.py',191),
  ('expression -> numexpression expressionaux','expression',2,'p_expression','parser.py',194),
  ('expressionaux -> COMPARISON numexpression','expressionaux',2,'p_expressionaux','parser.py',197),
  ('expressionaux -> epsilon','expressionaux',1,'p_expressionaux','parser.py',198),
  ('numexpressionvector -> LBRACKET numexpression RBRACKET numexpressionvectoraux','numexpressionvector',4,'p_numexpressionvector','parser.py',201),
  ('numexpressionvectoraux -> numexpressionvector','numexpressionvectoraux',1,'p_numexpressionvectoraux','parser.py',204),
  ('numexpressionvectoraux -> epsilon','numexpressionvectoraux',1,'p_numexpressionvectoraux','parser.py',205),
  ('numexpression -> term numexpressionaux','numexpression',2,'p_numexpression','parser.py',208),
  ('numexpressionaux -> numexpression2','numexpressionaux',1,'p_numexpressionaux','parser.py',211),
  ('numexpressionaux -> epsilon','numexpressionaux',1,'p_numexpressionaux','parser.py',212),
  ('numexpression2 -> SIGNAL term numexpressionaux','numexpression2',3,'p_numexpression2','parser.py',215),
  ('term -> unaryexpr termaux','term',2,'p_term','parser.py',218),
  ('termaux -> term2','termaux',1,'p_termaux','parser.py',221),
  ('termaux -> epsilon','termaux',1,'p_termaux','parser.py',222),
  ('term2 -> MATH unaryexpr termaux','term2',3,'p_term2','parser.py',225),
  ('unaryexpr -> SIGNAL factor','unaryexpr',2,'p_unaryexpr','parser.py',228),
  ('unaryexpr -> factor','unaryexpr',1,'p_unaryexpr','parser.py',229),
  ('factor -> INTCONST','factor',1,'p_factor','parser.py',232),
  ('factor -> STRINGCONST','factor',1,'p_factor','parser.py',233),
  ('factor -> FLOATCONST','factor',1,'p_factor','parser.py',234),
  ('factor -> NULL','factor',1,'p_factor','parser.py',235),
  ('factor -> lvalue','factor',1,'p_factor','parser.py',236),
  ('factor -> LPAREN numexpression RPAREN','factor',3,'p_factor','parser.py',237),
  ('lvalue -> IDENT numexpressionvectoraux','lvalue',2,'p_lvalue','parser.py',240),
  ('vardecl -> type IDENT vardeclaux','vardecl',3,'p_vardecl','parser.py',243),
  ('vardeclaux -> vardecl2','vardeclaux',1,'p_vardeclaux','parser.py',246),
  ('vardeclaux -> epsilon','vardeclaux',1,'p_vardeclaux','parser.py',247),
  ('vardecl2 -> LBRACKET INTCONST RBRACKET vardeclaux','vardecl2',4,'p_vardecl2','parser.py',250),
  ('type -> INT','type',1,'p_type','parser.py',253),
  ('type -> FLOAT','type',1,'p_type','parser.py',254),
  ('type -> STRING','type',1,'p_type','parser.py',255),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','parser.py',258),
]
